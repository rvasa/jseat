package metric.gui.swt.explorer;

import java.util.Observable;
import java.util.Observer;

import metric.core.util.EnumTable;
import metric.core.util.logging.LogOrganiser;
import metric.gui.swt.core.util.SWTUtils;
import metric.gui.swt.core.util.logging.LogEvent;
import metric.gui.swt.core.util.logging.SWTGuiHandler;
import metric.gui.swt.core.vocabulary.GUI;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.layout.RowData;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.Text;

/**
 * Represents the center, or main composite in this GUI. This includes the main
 * output area and clear/execute buttons.
 * 
 * Acts as an <code>Observer</code> to the <code>GuiLogHandler</code>,
 * which is necessary to capture log events and safely display them in the GUI.
 * 
 * Is responsible for handling any listener events generated by components in
 * this class.
 * 
 * @author Joshua Hayes,Swinburne University (ICT),2007
 */
public class CenterComposite extends Composite implements Observer,
		SelectionListener
{
	private Text tConsole;
	private Button bClear, bExecute;
	private JSeatExplorer parent;
	private Composite consoleComposite, displayComposite, executeComposite;
	private TabFolder tabFolder;

	public CenterComposite(JSeatExplorer parent, Shell shell, int type)
	{
		super(shell, type);
		this.parent = parent;

		GridLayout gridLayout = new GridLayout();
		gridLayout.marginTop = 0;
		gridLayout.marginBottom = 0;
		setLayout(gridLayout);
		GridData gd = new GridData(GridData.FILL_BOTH);
		gd.minimumWidth = shell.getSize().x / 2 + shell.getSize().x / 6;
		setLayoutData(gd);
		
		GridData outputGroupGrid = new GridData(GridData.FILL_BOTH);
		outputGroupGrid.widthHint = shell.getSize().x / 2 + shell.getSize().y
				/ 4;
		
		tabFolder = new TabFolder(this, SWT.NONE);
		tabFolder.setLayoutData(outputGroupGrid);
		tabFolder.setLayout(new GridLayout());
		tabFolder.addSelectionListener(this);
		
		TabItem consoleTabItem = new TabItem(tabFolder, SWT.NONE);
		consoleTabItem.setText("Console");
		TabItem displayTabItem = new TabItem(tabFolder, SWT.NONE);
		displayTabItem.setText("Display");

		consoleComposite = new Composite(tabFolder, SWT.NONE);
		consoleComposite.setLayout(new GridLayout());
		consoleComposite.setLayoutData(outputGroupGrid);

		tConsole = new Text(consoleComposite, SWT.MULTI | SWT.H_SCROLL
				| SWT.V_SCROLL | SWT.READ_ONLY);
		tConsole.setLayoutData(new RowData(shell.getSize().x / 2, 20));
		tConsole.setLayoutData(new GridData(GridData.FILL_BOTH));

		tConsole.setFont(new Font(shell.getDisplay(), "Courier New", 10,
				SWT.NORMAL));

//		executeComposite = SWTUtils.centerComposite(consoleComposite, SWT.NONE);
//		bClear = SWTUtils.createButton(executeComposite, SWT.PUSH, "Clear", this);
//		bExecute = SWTUtils.createButton(executeComposite, SWT.PUSH, "Execute", this);
//		SWTUtils.hookDisposeLisener(executeComposite, bClear);
//		SWTUtils.hookDisposeLisener(executeComposite, bExecute);
		createExecuteComposite(consoleComposite);
		consoleTabItem.setControl(consoleComposite);
		
		displayComposite = new Composite(tabFolder, SWT.NONE);
		displayComposite.setLayout(new FillLayout());
		displayComposite.setLayoutData(outputGroupGrid);
		displayTabItem.setControl(displayComposite);
		
//		bcd.
		
		pack();

		// Initialise gui handler.
		SWTGuiHandler handler = new SWTGuiHandler();
		handler.addObserver(this);
		LogOrganiser.addHandler(handler);
	}
	
	private void createExecuteComposite(Composite parent)
	{
		if (executeComposite != null)
			executeComposite.dispose();
		executeComposite = SWTUtils.centerComposite(parent, SWT.NONE);
		bClear = SWTUtils.createButton(executeComposite, SWT.PUSH, "Clear", this);
		bExecute = SWTUtils.createButton(executeComposite, SWT.PUSH, "Execute", this);
		SWTUtils.hookDisposeLisener(executeComposite, bClear);
		SWTUtils.hookDisposeLisener(executeComposite, bExecute);
		executeComposite.redraw();
	}

	public void update(final Observable observable, Object arg1)
	{
		if (observable instanceof LogEvent)
		{
			Runnable toRun = new Runnable()
			{
				public void run()
				{
					LogEvent e = (LogEvent) observable;
					if (e.status == GUI.REQ_OAREA_UPDATE.getValue())
					{
						if (e.params != null)
						{
							if (e.params[0] instanceof EnumTable)
							{
								EnumTable et = (EnumTable) e.params[0];
								tConsole.append(et.toString());
							}
						} else
							tConsole.append(e.message);
					}
					return;
				}
			};
			Display.getDefault().asyncExec(toRun);
		}
	}

	public void widgetDefaultSelected(SelectionEvent arg0)
	{
	} // Not interested in this.

	public void widgetSelected(SelectionEvent event)
	{
		if (event.getSource() == bExecute)
		{
			parent.executeReport();
		} else if (event.getSource() == bClear)
		{
			// clear;
			tConsole.setText("");
		}
		else if (event.getSource() == tabFolder){
//			System.out.println(event.item.toString());
//			if (event.item.toString().contains("Console"))
//			{
//				createExecuteComposite(consoleComposite);
//			}
//			else if (event.item.toString().contains("Display"))
//			{
//				createExecuteComposite(displayComposite);
//			}
		}
	}
	
	/**
	 * @return The composite used to display charts.
	 */
	public Composite getDisplayArea()
	{
		return displayComposite;
	}
}
